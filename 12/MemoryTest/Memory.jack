// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int heapBase, freeList;
    static int debug;

    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let freeList = heapBase + 2;
        /** initialize a implicit free list as a big chunk with a two-word header */
        do Memory.setSize(freeList, 16383 - 2048 - 2);
        do Memory.setNext(freeList, 0);
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, allocate, oldsize;

        let block = freeList;
        while (~(block = 0)) {
            let oldsize = Memory.getSize(block);
            /** find a suitable free block using first-fit algorithm */
            if (~(oldsize < (size + 2))) {
                /** allocate the higher remian part of the free block */
                let allocate = block + oldsize - size;
                do Memory.setSize(allocate, size);
                do Memory.setNext(allocate, 0);
                /** reset the free block size */
                do Memory.setSize(block, oldsize - size - 2);
                return allocate;
            }
            let block = Memory.getNext(block);
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;

        let block = freeList;
        /** find the last free block */
        while (~(Memory.getNext(block) = 0)) {
            let block = Memory.getNext(block);
        }
        /** append to tail of the freeList */
        do Memory.setNext(block, o);
        return;
    }

    /** below are helper functions */

    function void setSize(int block, int size) {
        let block[-2] = size;
        return;
    }

    function void setNext(int block, int next) {
        let block[-1] = next;
        return;
    }

    function int getSize(int block) {
        return block[-2];
    }

    function int getNext(int block) {
        return block[-1];
    }
}