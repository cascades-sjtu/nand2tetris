// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe; /** a fixed static array of length 16 */

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        /** each element i is 2 raised to the power of i */
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        } else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i;
        let sum = 0;
        let i = 0;
        while (i < 16) {
            if (Math.bit(x, i)) {
                let sum = sum + y;
            }
            let y = y + y;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int abs_res;
        let abs_res = Math.divide_abs(Math.abs(x), Math.abs(y)); 
        if ((x < 0) & (y > 0)) {
            return -abs_res;
        }
        if ((x > 0) & (y < 0)) {
            return -abs_res;
        }
        return abs_res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int res, i;
        let res = 0;
        let i = 7;
        while (~(i < 0)) {
            if (~((res + twoToThe[i]) * (res + twoToThe[i]) > x)) {
                let res = res + twoToThe[i];
            }
            // prevent integer overflow
            if (res + twoToThe[i] > 181) {
                return 181;
            }
            let i = i - 1;
        }
        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return 0;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return 0;
    }

    /** below are helper functions */

    /** return true if the ith bit is 1 */
    function boolean bit(int x, int i) {
        var int powerofi;
        let powerofi = twoToThe[i];
        if ((x & powerofi) = 0) {
            return false;
        } else {
            return true;
        }
    }

    /** recursive division with carrying */
    function int divide_abs(int x, int y) {
        var int q;
        if (y > x) {
            return 0;
        }
        let q = Math.divide_abs(x, y + y);
        if ((x - (2 * q * y)) < y) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }
}
