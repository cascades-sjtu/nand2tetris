// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currColor;
    static int screen;
    static Array twoToThe; /** a fixed static array of length 16 */

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let screen = 16384;
        let currColor = true;
        /** initialize twoToThe */
        let twoToThe = Array.new(16);
        /** each element i is 2 raised to the power of i */
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 512, 256);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. 0 <= x(column) <= 512, 0 <= y(row) <= 256 */
    function void drawPixel(int x, int y) {
        var int address, value, offset;

        /** fetch the word that the bit located in */
        let address = screen + (y * 32) + (x / 16);
        let value = Memory.peek(address);
        /** get pixel's offset bit */
        let offset = x - (x / 16 * 16);
        /** set the bit according to currColor */
        if (currColor) {
            let value = value | twoToThe[offset];
        } else {
            let value = value & (~twoToThe[offset]);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;

        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        /** vertical and horizonal line does not fit the algorithm */
        if (dx = 0) {
            do Screen.drawVerticalLine(Math.min(y1, y2), Math.max(y1, y2), x1);
            return;
        }
        if (dy = 0) {
            do Screen.drawHorizonalLine(Math.min(x1, x2), Math.max(x1, x2), y1);
            return;
        }
        /** a and b tracks how many times we've gone right and up */
        let a = 0;
        let b = 0;
        /** diff keep and update the value of a*dy - b*dx */
        let diff = 0;
        /** go right-bottom */
        if ((dx > 0) & (dy > 0)) {
            while ((~(a > dx)) & (~(b > dy))) {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        /** go right-top */
        if ((dx > 0) & (dy < 0)) {
            while ((~(a > dx)) & (~(b < dy))) {
                do Screen.drawPixel(x + a, y + b);
                if (diff > 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
            return;
        }
        /** go left-bottom */
        if ((dx < 0) & (dy > 0)) {
            while ((~(a < dx)) & (~(b > dy))) {
                do Screen.drawPixel(x + a, y + b);
                if (diff > 0) {
                    let a = a - 1;
                    let diff = diff - dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        /** go left-top */
        if ((dx < 0) & (dy < 0)) {
            while ((~(a < dx)) & (~(b < dy))) {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0) {
                    let a = a - 1;
                    let diff = diff - dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
            return;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, j;
        
        let i = x1;
        while (i < (x2 + 1)) {
            let j = y1;
            while (j < (y2 + 1)) {
                do Screen.drawPixel(i, j);
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;

        let dy = -r;
        while (dy < (r + 1)) {
            do Screen.drawHorizonalLine(x - Math.sqrt((r * r) - (dy * dy)), x + Math.sqrt((r * r) - (dy * dy)), y + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** below are helper functions */

    function void drawVerticalLine(int y1, int y2, int x) {
        var int j;
        
        let j = y1;
        while (j < y2) {
            do Screen.drawPixel(x, j);
            let j = j + 1;
        }
        return;
    }

    function void drawHorizonalLine(int x1, int x2, int y) {
        var int i;
        
        let i = x1;
        while (i < x2) {
            do Screen.drawPixel(i, y);
            let i = i + 1;
        }
        return;

    }
}
