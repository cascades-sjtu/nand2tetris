// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // convert address
    Add16(a[13..15]=false,a[0..12]=address[0..12],b=false,out[0..12]=screenaddr);

    // decide which chip-part to write by bit sign
    Not(in=address[14],out=ram);
    Not(in=address[13],out=not13);
    And(a=address[14],b=not13,out=screen);
    And(a=address[14],b=address[13],out=keyboard);

    // combine with load
    And(a=load,b=ram,out=loadram);
    And(a=load,b=screen,out=loadscreen);

    // single address space memory
    RAM16K(in=in,load=loadram,address=address[0..13],out=ramout);
    Screen(in=in,load=loadscreen,address=screenaddr,out=screenout);
    Keyboard(out=keyboardout);

    // decide which chip-part to read by bit sign
    Mux16(a=false,b=ramout,sel=ram,out=mux1);
    Mux16(a=mux1,b=screenout,sel=screen,out=mux2);
    Mux16(a=mux2,b=keyboardout,sel=keyboard,out=out);
}